#!/usr/bin/python3

r"""
    Derives the mirror alignment parameters using cumulative PSF measurement.

    This includes parameters mirror_reflection_random_angle, \
    mirror_align_random_horizontal and mirror_align_random_vertical.

    The telescope zenith angle and the source distance can be set by command line arguments.

    The measured cumulative PSF should be provided by using the command line argument data. \
    A file name is expected, in which the file should contain 3 columns: radial distance in mm, \
    differential value of photon intensity and its integral value.

    The derivation is performed through a random search. A number of random combination of the \
    parameters are tested and the best ones are selected based on the minimum value of \
    the Root Mean Squared Deviation between data and simulations. The range in which the \
    parameter are drawn uniformly are defined based on the previous value on the telescope model.

    The optimization workflow includes:

    * Loading and preprocessing PSF data from measurement files
    * Generating random parameter combinations for optimization
    * Running ray-tracing simulations for each parameter set
    * Calculating RMSD between measured and simulated PSF curves
    * Identifying the best-fit parameters with minimum RMSD
    * Creating comprehensive plots and D80 vs off-axis angle analysis
    * Optionally exporting optimized parameters as simulation model files

    The assumption are:

    a) mirror_align_random_horizontal and mirror_align_random_vertical are the same.

    b) mirror_align_random_horizontal/vertical have no dependence on the zenith angle.

    One example of the plot generated by this applications are shown below.

    .. _derive_psf_parameters_plot:
    .. image::  images/derive_psf_parameters.png
      :width: 49 %

    Command line arguments
    ----------------------
    site (str, required)
        North or South.
    telescope (str, required)
        Telescope model name (e.g. LST-1, SST-D, ...).
    model_version (str, optional)
        Model version.
    parameter_version (str, optional)
        Parameter version for model parameter file export.
    src_distance (float, optional)
        Source distance in km.
    zenith (float, optional)
        Zenith angle in deg.
    data (str, optional)
        Name of the data file with the measured cumulative PSF.
    plot_all (activation mode, optional)
        If activated, plots will be generated for all values tested during tuning.
    fixed (activation mode, optional)
        Keep the first entry of mirror_reflection_random_angle fixed.
    test (activation mode, optional)
        If activated, application will be faster by simulating fewer photons.
    write_psf_parameters (activation mode, optional)
        Write the optimized PSF parameters as simulation model parameter files.
    random_seed (int, optional)
        Random seed for parameter generation.
    n_runs (int, optional)
        Number of parameter combinations to test.

    Example
    -------
    LSTN-01 5.0.0

    Runtime < 3 min.

    Get PSF data from the DB:

    .. code-block:: console

        simtools-db-get-file-from-db --file_name PSFcurve_data_v2.txt

    Run the application:

    .. code-block:: console

        simtools-derive-psf-parameters --site North --telescope LSTN-01 \\
            --model_version 6.0.0 --data tests/resources/PSFcurve_data_v2.txt --plot_all --test

    Run with parameter export:

    .. code-block:: console

        simtools-derive-psf-parameters --site North --telescope LSTN-01 \\
            --model_version 6.0.0 \\
            --data tests/resources/PSFcurve_data_v2.txt --write_psf_parameters

    The output is saved in simtools-output/tune_psf.

    Output files include:

    * Parameter optimization results in tested_psf_parameters.txt
    * PSF comparison plots in tune_psf_[telescope].pdf
    * D80 vs off-axis angle plots (d80_vs_offaxis_cm.png, d80_vs_offaxis_deg.png)
    * Optimized simulation model parameter files (if --write_psf_parameters is specified)
    * Cumulative PSF plots for all tested combinations (if --plot_all is specified)

"""

import logging
from pathlib import Path

from simtools.configuration import configurator
from simtools.io import io_handler
from simtools.model.model_utils import initialize_simulation_models
from simtools.ray_tracing import psf_parameter_optimisation as psf_opt
from simtools.utils.general import get_log_level_from_user


def _parse():
    config = configurator.Configurator(
        description=(
            "Derive mirror_reflection_random_angle, mirror_align_random_horizontal "
            "and mirror_align_random_vertical using cumulative PSF measurement."
        )
    )
    config.parser.add_argument(
        "--src_distance",
        help="Source distance in km",
        type=float,
        default=10,
    )
    config.parser.add_argument("--zenith", help="Zenith angle in deg", type=float, default=20)
    config.parser.add_argument(
        "--data", help="Data file name with the measured PSF vs radius [cm]", type=str
    )
    config.parser.add_argument(
        "--plot_all",
        help=(
            "On: plot cumulative PSF for all tested combinations, "
            "Off: plot it only for the best set of values"
        ),
        action="store_true",
    )
    config.parser.add_argument(
        "--fixed",
        help=("Keep the first entry of mirror_reflection_random_angle fixed."),
        action="store_true",
    )
    config.parser.add_argument(
        "--write_psf_parameters",
        help=("Write the optimized PSF parameters as simulation model parameter files"),
        action="store_true",
        required=False,
    )
    config.parser.add_argument(
        "--random_seed",
        help="Random seed for parameter generation.",
        type=int,
        default=None,
    )
    config.parser.add_argument(
        "--n_runs",
        help="Number of parameter combinations to test.",
        type=int,
        default=5,
    )
    return config.initialize(
        db_config=True,
        simulation_model=["telescope", "model_version", "parameter_version"],
    )


def main():  # noqa: D103
    args_dict, db_config = _parse()

    label = label = Path(__file__).stem
    logger = logging.getLogger()
    logger.setLevel(get_log_level_from_user(args_dict["log_level"]))

    _io_handler = io_handler.IOHandler()
    output_dir = _io_handler.get_output_directory(label, sub_dir="application-plots")
    tel_model, site_model = initialize_simulation_models(
        label=label,
        db_config=db_config,
        site=args_dict["site"],
        telescope_name=args_dict["telescope"],
        model_version=args_dict["model_version"],
    )

    psf_opt.run_psf_optimization_workflow(tel_model, site_model, args_dict, output_dir)


if __name__ == "__main__":
    main()
