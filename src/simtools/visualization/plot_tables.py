#!/usr/bin/python3
"""Plot tabular data."""

from pathlib import Path

import numpy as np
from astropy.table import Table

import simtools.utils.general as gen
from simtools.constants import SCHEMA_PATH
from simtools.db import db_handler
from simtools.io_operations import legacy_data_handler
from simtools.visualization import visualize


def plot(config, output_file, output_path=None, output_file_appendix=None, db_config=None):
    """
    Plot tabular data from data or from model parameter files.

    Parameters
    ----------
    config: dict
        Configuration dictionary for plotting.
    output_file: str
        Output file.
    output_path: Path, optional
        Path to the output directory where the plots will be saved.
    output_file_appendix: str, optional
        Appendix to the output file name.
    db_config: dict, optional
        Database configuration dictionary for accessing the model parameter database.
    """
    data, table_file = read_table_data(config, db_config)

    output_file = output_file or _generate_output_file_name(
        table_file, output_path, output_file_appendix
    )

    fig = visualize.plot_1d(
        data,
        **config,
    )

    visualize.save_figure(fig, output_file)
    return output_file


def plot_table_from_model_parameter(
    parameter,
    parameter_version,
    site=None,
    telescope=None,
    plot_type=None,
    output_path=None,
    db_config=None,
):
    """
    Plot table data from model parameter database.

    Use default configurations defined in the model parameter schema files.

    Parameters
    ----------
    parameter: str
        Model parameter name (e.g., 'atmospheric_profile').
    parameter_version: str
        Version of the model parameter (e.g., '1.0.0').
    site: str, optional
        Site for which the model parameter is defined (e.g., 'North').
    telescope: str, optional
        Telescope for which the model parameter is defined (e.g., 'LSTN-01').
    plot_type: str, optional
        Type of plot as defined in the schema file (e.g., 'profile', 'spectrum').
        Use 'all' to plot all types defined in the schema.
    output_path: Path, optional
        Path to the output directory where the plots will be saved.
    db_config: dict, optional
        Database configuration dictionary for accessing the model parameter database.

    Returns
    -------
    list
        List of output files generated by the plot function.
    """
    plot_configs = _read_default_plot_config_list(parameter, parameter_version, site, plot_type)
    if plot_configs is None:
        raise ValueError(
            f"No plot configuration found for parameter '{parameter}' with "
            f"version '{parameter_version}' and site '{site}'."
        )

    output_files = []
    for plot_config in plot_configs:
        output_files.append(
            plot(
                config=plot_config,
                output_file=None,
                output_path=output_path,
                output_file_appendix=_generate_output_file_name_appendix(
                    parameter, parameter_version, site, telescope, plot_config.get("type")
                ),
                db_config=db_config,
            )
        )

    return output_files


def read_table_data(config, db_config):
    """
    Read table data from file or parameter database.

    Parameters
    ----------
    config: dict
        Configuration dictionary for plotting.

    Returns
    -------
    Dict, str
        Dict with table data (astropy tables). Table file name (if read from database).
    """
    data = {}
    table_file_name = None

    for _config in config["tables"]:
        if "parameter" in _config:
            table, table_file_name = _read_table_from_model_database(_config, db_config)
        elif "file_name" in _config:
            if "legacy" in _config.get("type", ""):
                table = legacy_data_handler.read_legacy_data_as_table(
                    _config["file_name"], _config["type"]
                )
            else:
                table = Table.read(_config["file_name"], format="ascii.ecsv")
        else:
            raise ValueError("No table data defined in configuration.")

        if _config.get("normalize_y"):
            table[_config["column_y"]] = (
                table[_config["column_y"]] / table[_config["column_y"]].max()
            )
        if _config.get("select_values"):
            table = _select_values_from_table(
                table,
                _config["select_values"]["column_name"],
                _config["select_values"]["value"],
            )
        label = _config.get("label", f"{_config.get('column_x')} vs {_config.get('column_y')}")
        data[label] = gen.get_structure_array_from_table(
            table,
            [
                _config["column_x"],
                _config["column_y"],
                _config.get("column_x_err"),
                _config.get("column_y_err"),
            ],
        )
    return data, table_file_name


def _read_table_from_model_database(table_config, db_config):
    """
    Read table data from model parameter database.

    Parameters
    ----------
    table_config: dict
        Configuration dictionary for table data.

    Returns
    -------
    Table
        Astropy table.
    """
    db = db_handler.DatabaseHandler(mongo_db_config=db_config)
    return db.export_model_file(
        parameter=table_config["parameter"],
        site=table_config["site"],
        array_element_name=table_config.get("telescope"),
        parameter_version=table_config.get("parameter_version"),
        model_version=table_config.get("model_version"),
        export_file_as_table=True,
    )


def _select_values_from_table(table, column_name, value):
    """Return a table with only the rows where column_name == value."""
    return table[np.isclose(table[column_name], value)]


def _read_default_plot_config_list(parameter, parameter_version, site, plot_type):
    """
    Generate plot configuration for a model parameter from schema files.

    Parameters
    ----------
    parameter: str
        Model parameter name.

    Returns
    -------
    list
        List of default plot configurations.
    """
    schema = gen.change_dict_keys_case(
        gen.collect_data_from_file(
            file_name=SCHEMA_PATH / "model_parameters" / f"{parameter}.schema.yml"
        ),
        lower_case=True,
    )
    plot_config_all = schema.get("plot_configuration")
    if plot_config_all is None:
        return None
    if plot_type == "all":
        plot_config = plot_config_all
    else:
        plot_config = [config for config in plot_config_all if config.get("type") == plot_type]
        if not plot_config:
            raise ValueError(
                f"No plot configuration found for type '{plot_type}' in parameter '{parameter}'."
            )

    for _config in plot_config:
        for _table in _config.get("tables", []):
            _table["parameter_version"] = parameter_version
            _table["site"] = site

    return plot_config


def _generate_output_file_name(table_file, output_path=None, output_file_appendix=None):
    """Generate output file name based on table file and appendix."""
    output_file = f"{Path(table_file).stem}_{output_file_appendix}"
    if output_path is not None:
        return Path(output_path) / output_file
    return Path(output_file)


def _generate_output_file_name_appendix(parameter, parameter_version, site, telescope, plot_type):
    """Generate appendix part of the output file name."""
    if telescope:
        return f"{parameter}_{parameter_version}_{site}_{telescope}_{plot_type}.png"

    return f"{parameter}_{parameter_version}_{site}_{plot_type}.png"
