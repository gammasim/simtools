---
name: CI-unittests
# Unit tests (includes CTAO-SonarQube)

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - 'docs/**'
      - 'tests/integration_tests/**'
  schedule:
    - cron: "0 0 * * *"
  release:
    types: [published]

jobs:
  unit_tests:
    env:
      SIMTOOLS_DB_SERVER: ${{ 'localhost' }}
      SIMTOOLS_DB_API_USER: ${{ 'api' }}
      SIMTOOLS_DB_API_PW: ${{ 'password' }}
      SIMTOOLS_DB_API_PORT: ${{ '27017' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.12"
            install-method: pip

          - os: ubuntu-latest
            python-version: "3.13"
            install-method: mamba
            extra-args: ["sonarqube", "random-order"]

          - os: ubuntu-latest
            python-version: "3.13"
            install-method: pip

    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: api
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --host localhost --port 27017 -u api -p password --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      - name: checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Prepare mamba installation
        if: matrix.install-method == 'mamba'
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          sed -i -e "s/- python=.*/- python=$PYTHON_VERSION/g" environment.yml

      - name: Install mamba dependencies
        if: matrix.install-method == 'mamba'
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: environment.yml
          create-args: python=${{ matrix.python-version }}
          init-shell: bash

      - name: Python setup
        if: matrix.install-method == 'pip'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true

      - name: Python dependencies
        run: |
          pip install -e '.[tests]'

      - name: Extract SIMTOOLS_DB_SIMULATION_MODEL
        run: |
          SIMTOOLS_DB_SIMULATION_MODEL_VERSION=$(grep 'SIMTOOLS_DB_SIMULATION_MODEL_VERSION=' .env_template | cut -d '=' -f2- | tr -d '"')
          SIMTOOLS_DB_SIMULATION_MODEL=$(grep 'SIMTOOLS_DB_SIMULATION_MODEL=' .env_template | cut -d '=' -f2- | tr -d '"')
          SIMTOOLS_DB_SIMULATION_MODEL="${SIMTOOLS_DB_SIMULATION_MODEL//\'/}"
          echo "SIMTOOLS_DB_SIMULATION_MODEL=$SIMTOOLS_DB_SIMULATION_MODEL" >> "$GITHUB_ENV"
          echo "SIMTOOLS_DB_SIMULATION_MODEL_VERSION=$SIMTOOLS_DB_SIMULATION_MODEL_VERSION" >> "$GITHUB_ENV"
          echo "Simulation model set to: $SIMTOOLS_DB_SIMULATION_MODEL version $SIMTOOLS_DB_SIMULATION_MODEL_VERSION"

      - name: Print DB connection variables
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "DB Server: $SIMTOOLS_DB_SERVER"
          echo "DB API User: $SIMTOOLS_DB_API_USER"
          echo "DB API Port: $SIMTOOLS_DB_API_PORT"
          echo "DB Simulation Model: $SIMTOOLS_DB_SIMULATION_MODEL"
          echo "DB Simulation Model Version: $SIMTOOLS_DB_SIMULATION_MODEL_VERSION"

      - name: Upload data to MongoDB
        run: |
          cd database_scripts/
          ./upload_from_model_repository_to_db.sh ${{ env.SIMTOOLS_DB_SIMULATION_MODEL }} ${{ env.SIMTOOLS_DB_SIMULATION_MODEL_VERSION }}

      - name: Unit tests
        shell: bash -l {0}
        env:
          SIMTOOLS_DB_SIMULATION_MODEL: ${{ env.SIMTOOLS_DB_SIMULATION_MODEL }}
          SIMTOOLS_DB_SIMULATION_MODEL_VERSION: ${{ env.SIMTOOLS_DB_SIMULATION_MODEL_VERSION }}
        run: |
          pytest --durations=10 --color=yes -n 4 --dist loadscope \
            --cov=simtools --cov-report=xml --retries 2 --retry-delay 5

      # CTAO-DPPS-SonarQube
      - uses: SonarSource/sonarqube-scan-action@v5.3.1
        if: contains(matrix.extra-args, 'sonarqube')
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=gammasim_simtools_0d23837b-8b2d-4e54-9a98-2f1bde681f14
            -Dsonar.host.url=https://sonar-ctao.zeuthen.desy.de
            -Dsonar.qualitygate.wait=true
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.version=${{ matrix.python-version }}
            -Dsonar.exclusions=**/docs/**,src/simtools/applications/**,**/__init__.py
            -Dsonar.coverage.exclusions=**/tests/**,src/simtools/applications/**

      - name: Random order
        if: github.event_name == 'schedule' && contains(matrix.extra-args, 'random-order')
        shell: bash -l {0}
        env:
          SIMTOOLS_DB_SIMULATION_MODEL: ${{ env.SIMTOOLS_DB_SIMULATION_MODEL }}
          SIMTOOLS_DB_SIMULATION_MODEL_VERSION: ${{ env.SIMTOOLS_DB_SIMULATION_MODEL_VERSION }}
        run: |
          pytest --color=yes -n 4 --dist loadscope --count 5 --random-order \
           --retries 2 --retry-delay 5
