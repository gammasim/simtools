---
name: CI-integrationtests
# Integration tests for applications

on:
  workflow_dispatch:
    inputs:
      simulation_model_branch:
        description: 'Simulation model branch'
        required: false
        type: string
        default: 'main'
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - 'docs/**'
      - 'tests/unit_tests/**'
  schedule:
    - cron: "0 0 * * *"
  release:
    types: [published]

jobs:

  test_building:
    # Build the package and check if it is installable
    # (tests among others that all components are there)
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:

      - name: checkout
        uses: actions/checkout@v5

      - name: Build the package
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build
          python -m build

  integration_tests:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/gammasim/simtools-dev:latest
      options: --user 0

    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: api
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --host localhost --port 27017 -u api -p password --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        model_version: ['6.0', '5.0', '6.0,6.1']

    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      - name: checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set sim_telarray path
        run: |
          echo "PATH=\$PATH:/usr/bin:/usr/local/bin:$SIMTOOLS_SIMTEL_PATH" >> "$GITHUB_ENV"

      - name: Create environment file (remote DB; schedule only)
        if: ${{ github.event_name == 'schedule' }}
        run: |
          {
            echo "SIMTOOLS_DB_SERVER=${{ secrets.DB_SERVER }}"
            echo "SIMTOOLS_DB_API_USER=${{ secrets.DB_API_USER }}"
            echo "SIMTOOLS_DB_API_PW=${{ secrets.DB_API_PW }}"
            echo "SIMTOOLS_DB_API_PORT=${{ secrets.DB_API_PORT }}"
            echo "SIMTOOLS_SIMTEL_PATH=/workdir/sim_telarray/"
          } > .env

      - name: Extract SIMTOOLS_DB_SIMULATION_MODEL
        run: |
          SIMTOOLS_DB_SIMULATION_MODEL_VERSION=$(grep 'SIMTOOLS_DB_SIMULATION_MODEL_VERSION=' .env_template | cut -d '=' -f2- | tr -d '"')
          SIMTOOLS_DB_SIMULATION_MODEL=$(grep 'SIMTOOLS_DB_SIMULATION_MODEL=' .env_template | cut -d '=' -f2- | tr -d '"')
          SIMTOOLS_DB_SIMULATION_MODEL="${SIMTOOLS_DB_SIMULATION_MODEL//\'/}"
          echo "SIMTOOLS_DB_SIMULATION_MODEL=$SIMTOOLS_DB_SIMULATION_MODEL" >> "$GITHUB_ENV"
          echo "SIMTOOLS_DB_SIMULATION_MODEL_VERSION=$SIMTOOLS_DB_SIMULATION_MODEL_VERSION" >> "$GITHUB_ENV"
          echo "Simulation model set to: $SIMTOOLS_DB_SIMULATION_MODEL version $SIMTOOLS_DB_SIMULATION_MODEL_VERSION"

      - name: Create environment file (local DB)
        if: github.event_name != 'schedule'
        run: |
          {
            echo "SIMTOOLS_DB_SERVER=mongodb"
            echo "SIMTOOLS_DB_API_USER=api"
            echo "SIMTOOLS_DB_API_PW=password"
            echo "SIMTOOLS_DB_API_PORT=27017"
            echo "SIMTOOLS_DB_SIMULATION_MODEL_VERSION=${{ env.SIMTOOLS_DB_SIMULATION_MODEL_VERSION }}"
            echo "SIMTOOLS_DB_SIMULATION_MODEL=${{ env.SIMTOOLS_DB_SIMULATION_MODEL }}"
            echo "SIMTOOLS_SIMTEL_PATH=/workdir/sim_telarray/"
          } > .env

      - name: Determine simulation model branch
        env:
          HEAD_REF: ${{ github.head_ref }}
          REF_NAME: ${{ github.ref_name }}
          EVENT_NAME: ${{ github.event_name }}
          INPUT_BRANCH: ${{ github.event.inputs.simulation_model_branch }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ] && [ -n "$INPUT_BRANCH" ]; then
            BRANCH="$INPUT_BRANCH"
          else
            BRANCH="main"
          fi
          if [ "$EVENT_NAME" = "pull_request" ]; then
            CURRENT_REF="$HEAD_REF"
          else
            CURRENT_REF="$REF_NAME"
          fi
          # release candidates (e.g., v1.2.3-rc or v1.2.3-rc3) should be tested against released versions of the
          # simulation model database
          if [[ "$CURRENT_REF" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]*$ ]]; then
            echo "Detected RC version branch: $CURRENT_REF - setting branch to $SIMTOOLS_DB_SIMULATION_MODEL_VERSION"
            BRANCH="$SIMTOOLS_DB_SIMULATION_MODEL_VERSION"
          fi
          echo "SIMTOOLS_DB_SIMULATION_MODEL_BRANCH=$BRANCH" >> "$GITHUB_ENV"

      - name: Print DB connection variables
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "DB Server: $SIMTOOLS_DB_SERVER"
          echo "DB API User: $SIMTOOLS_DB_API_USER"
          echo "DB API Port: $SIMTOOLS_DB_API_PORT"
          echo "DB Simulation Model: $SIMTOOLS_DB_SIMULATION_MODEL"
          echo "DB Simulation Model Version: $SIMTOOLS_DB_SIMULATION_MODEL_VERSION"
          echo "DB Simulation Model Branch: $SIMTOOLS_DB_SIMULATION_MODEL_BRANCH"

      - name: Upload data to MongoDB
        if: github.event_name != 'schedule'
        run: |
          source /workdir/env/bin/activate
          pip install --no-cache-dir -e '.[tests,dev,doc]'
          simtools-db-upload-model-repository \
            --db_simulation_model ${{ env.SIMTOOLS_DB_SIMULATION_MODEL }} \
            --db_simulation_model_version ${{ env.SIMTOOLS_DB_SIMULATION_MODEL_VERSION }} \
            --branch "$SIMTOOLS_DB_SIMULATION_MODEL_BRANCH"

      - name: Integration tests
        shell: bash -l {0}
        env:
          SIMTOOLS_DB_SIMULATION_MODEL: ${{ env.SIMTOOLS_DB_SIMULATION_MODEL }}
          SIMTOOLS_DB_SIMULATION_MODEL_VERSION: ${{ env.SIMTOOLS_DB_SIMULATION_MODEL_VERSION }}
          SIMTOOLS_DB_SERVER: ${{ github.event_name == 'schedule' && secrets.DB_SERVER || 'mongodb' }}
        run: |
          source /workdir/env/bin/activate
          pip install --no-cache-dir -e '.[tests,dev,doc]'
          pytest --model_version=${{ matrix.model_version }} --color=yes --durations=20 \
           -n 4 --dist loadscope --retries 2 --retry-delay 5 --no-cov tests/integration_tests/
