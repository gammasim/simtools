---
name: build-simtools
# Build and push simtools images using CORSIKA / sim_telarray base images.
# Integration tests are running on the non-optimized ('no_opt') images.

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["build-corsika-simtel"]
    types: [completed]
  pull_request:
    paths:
      - docker/Dockerfile-simtools
  release:
    types: [published]
  schedule:
    - cron: '0 1 * * 0'  # Every Sunday at 01:00 UTC (1 hour after base images)

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-simtools-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version:
          # list of avx instructions: 'avx2', 'avx512f', 'sse4', 'avx'
          - {simtel_version: '240205', corsika_version: '77500', bernlohr_version: '1.67', hadronic_model: 'qgs2', avx_instruction: 'no_opt'}
          - {simtel_version: '240927', corsika_version: '77550', bernlohr_version: '1.68', hadronic_model: 'qgs2', avx_instruction: 'no_opt'}
          - {simtel_version: '240927', corsika_version: '77550', bernlohr_version: '1.68', hadronic_model: 'qgs2', avx_instruction: 'avx2'}
          - {simtel_version: '240927', corsika_version: '77550', bernlohr_version: '1.68', hadronic_model: 'qgs2', avx_instruction: 'avx512f'}
          - {simtel_version: '240927', corsika_version: '77550', bernlohr_version: '1.68', hadronic_model: 'qgs2', avx_instruction: 'sse4'}
          - {simtel_version: '250304', corsika_version: '78000', bernlohr_version: '1.69', hadronic_model: 'qgs3', avx_instruction: 'no_opt'}
          - {simtel_version: '250304', corsika_version: '78000', bernlohr_version: '1.69', hadronic_model: 'qgs3', avx_instruction: 'avx2'}
        production:
          # list of productions build options: 'prod6-sc', 'prod6-baseline', 'prod5', 'prod5-sc'
          - {build_opt: 'prod6-sc', extra_def: ''}
          - {build_opt: 'prod6-baseline', extra_def: ''}

    env:
      BASE_LABELS: "corsika-simtel-${{ matrix.version.simtel_version }}-corsika-${{ matrix.version.corsika_version }}-bernlohr-${{ matrix.version.bernlohr_version }}-${{ matrix.production.build_opt }}-${{ matrix.version.hadronic_model }}-${{ matrix.version.avx_instruction }}"
      SIMTOOLS_LABELS: "simtools-sim-telarray-${{ matrix.version.simtel_version }}-corsika-${{ matrix.version.corsika_version }}-bernlohr-${{ matrix.version.bernlohr_version }}-${{ matrix.production.build_opt }}-${{ matrix.version.hadronic_model }}-${{ matrix.version.avx_instruction }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set build branch
        run: |
          if [[ "${{ github.event_name }}" == 'pull_request' ]]; then
            echo "BUILD_BRANCH=${GITHUB_HEAD_REF}" >> "$GITHUB_ENV"
          else
            echo "BUILD_BRANCH=${GITHUB_REF#refs/heads/}" >> "$GITHUB_ENV"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for simtools image (tags, labels)
        id: meta-simtools
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=ref,event=pr
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          images: ${{ env.REGISTRY }}/gammasim/${{ env.SIMTOOLS_LABELS }}
          flavor: latest=true

      - name: Build and push simtools image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/gammasim/${{ env.BASE_LABELS }}:latest
            BUILD_BRANCH=${{ env.BUILD_BRANCH }}
          push: ${{ github.event_name == 'release' || github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' }}
          file: ./docker/Dockerfile-simtools
          tags: ${{ steps.meta-simtools.outputs.tags }}
          labels: ${{ steps.meta-simtools.outputs.labels }}-prod

  test-images:
    runs-on: ubuntu-latest
    needs: build-simtools-images
    strategy:
      matrix:
        version:
          # list of avx instructions: 'avx2', 'avx512f', 'sse4', 'avx'
          - {simtel_version: '240205', corsika_version: '77500', bernlohr_version: '1.67', hadronic_model: 'qgs2', avx_instruction: 'no_opt'}
          - {simtel_version: '240927', corsika_version: '77550', bernlohr_version: '1.68', hadronic_model: 'qgs2', avx_instruction: 'no_opt'}
          - {simtel_version: '240927', corsika_version: '77550', bernlohr_version: '1.68', hadronic_model: 'qgs2', avx_instruction: 'avx2'}
          - {simtel_version: '250304', corsika_version: '78000', bernlohr_version: '1.69', hadronic_model: 'qgs3', avx_instruction: 'no_opt'}
          - {simtel_version: '250304', corsika_version: '78000', bernlohr_version: '1.69', hadronic_model: 'qgs3', avx_instruction: 'avx2'}
        production:
          # list of productions build options: 'prod6-sc', 'prod6-baseline', 'prod5', 'prod5-sc'
          - {build_opt: 'prod6-sc', extra_def: ''}
          - {build_opt: 'prod6-baseline', extra_def: ''}
        model_version:
          - "6.0"
    container:
      image: ghcr.io/gammasim/simtools-prod-sim-telarray-${{ matrix.version.simtel_version }}-corsika-${{ matrix.version.corsika_version }}-bernlohr-${{ matrix.version.bernlohr_version }}-${{ matrix.production.build_opt }}-${{ matrix.version.hadronic_model }}-${{ matrix.version.avx_instruction }}
      options: --user 0

    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: api
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --host localhost --port 27017 -u api -p password --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      - name: checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set sim_telarray path
        run: |
          echo "PATH=\$PATH:/usr/bin:/usr/local/bin:$SIMTOOLS_SIMTEL_PATH" >> "$GITHUB_ENV"

      - name: Extract SIMTOOLS_DB_SIMULATION_MODEL
        run: |
          SIMTOOLS_DB_SIMULATION_MODEL_VERSION=$(grep 'SIMTOOLS_DB_SIMULATION_MODEL_VERSION=' .env_template | cut -d '=' -f2- | tr -d '"')
          SIMTOOLS_DB_SIMULATION_MODEL=$(grep 'SIMTOOLS_DB_SIMULATION_MODEL=' .env_template | cut -d '=' -f2- | tr -d '"')
          echo "SIMTOOLS_DB_SIMULATION_MODEL_VERSION=$SIMTOOLS_DB_SIMULATION_MODEL_VERSION" >> "$GITHUB_ENV"
          echo "SIMTOOLS_DB_SIMULATION_MODEL=$SIMTOOLS_DB_SIMULATION_MODEL" >> "$GITHUB_ENV"
          echo "Simulation model set to: $SIMTOOLS_DB_SIMULATION_MODEL version $SIMTOOLS_DB_SIMULATION_MODEL_VERSION"

      - name: Create environment file (local DB)
        run: |
          {
            echo "SIMTOOLS_DB_SERVER=mongodb"
            echo "SIMTOOLS_DB_API_USER=api"
            echo "SIMTOOLS_DB_API_PW=password"
            echo "SIMTOOLS_DB_API_PORT=27017"
            echo "SIMTOOLS_DB_SIMULATION_MODEL=${{ env.SIMTOOLS_DB_SIMULATION_MODEL }}"
            echo "SIMTOOLS_DB_SIMULATION_MODEL_VERSION=${{ env.SIMTOOLS_DB_SIMULATION_MODEL_VERSION }}"
            echo "SIMTOOLS_SIMTEL_PATH=/workdir/sim_telarray/"
          } > .env

      - name: Upload data to MongoDB
        run: |
          source /workdir/env/bin/activate
          pip install --no-cache-dir -e '.[tests,dev,doc]'
            simtools-db-upload-model-repository \
            --db_simulation_model ${{ env.SIMTOOLS_DB_SIMULATION_MODEL }} \
            --db_simulation_model_version ${{ env.SIMTOOLS_DB_SIMULATION_MODEL_VERSION }}

      - name: Integration tests
        shell: bash -l {0}
        env:
          SIMTOOLS_DB_SIMULATION_MODEL: ${{ env.SIMTOOLS_DB_SIMULATION_MODEL }}
          SIMTOOLS_DB_SIMULATION_MODEL_VERSION: ${{ env.SIMTOOLS_DB_SIMULATION_MODEL_VERSION }}
          SIMTOOLS_DB_SERVER: 'mongodb'
        run: |
          source /workdir/env/bin/activate
          pip install --no-cache-dir pytest pytest-cov pytest-requirements pytest-xdist
          pytest --model_version=${{ matrix.model_version }} --no-cov --color=yes -n auto tests/integration_tests/test_applications_from_config.py
